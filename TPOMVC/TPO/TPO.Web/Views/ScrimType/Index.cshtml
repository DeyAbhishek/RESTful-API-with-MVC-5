@model TPO.Web.Models.ScrimTypeModel

@using System.Web.UI.WebControls
@{
    string type = "Scrim Type";
    bool isLiner = false;
    if (ViewBag.ReleaseLiner == true)
    {
        type = "Release Liner Type";
        isLiner = true;
    }
    string types = @type + "s";
}


@{
    ViewBag.Title = types + " List";
}

<h2>@ViewBag.Title</h2>

<div style="margin:20px 0;"></div>

<table id="dg" class="easyui-datagrid" title="@types" style="width:960px;height:350px"
    data-options="
    iconCls: 'icon-edit',
    singleSelect: true,
    toolbar: '#tb',
    url: '../ScrimType/GetAllScrimTypeResult?isLiner=@isLiner',
    method: 'get',
    cache: false,
    onClickRow: onClickRow,
    pagination: true,
    pageSize:10,
    pageList:[10,20,50]
    ">

</table>

<div id="tb" style="height:auto">
    <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'icon-add',plain:true" onclick="append()">Create New</a>
    <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'icon-save',plain:true" onclick="accept()">Save Changes</a>
    <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'icon-undo',plain:true" onclick="reject()">Undo</a>
</div>

<script type="text/javascript">
    function formatNumberAsCommaSeparatedInt(value, row, index) {
        if (value == null) return value;
        value = Math.round(value);
        return value.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    }
    function formatLengthUoM(value, row, index) {
        return row.Code;
    }


    $('#dg').datagrid({
        columns: [[
            { field: 'IsLiner', title: 'IsLiner', hidden: true },
            { field: 'Id', title: 'Id', hidden: true },
            {
                field: 'Code',
                title: '@type',
                width: 120, editor: 'text'
            },
            { field: 'Description', title: 'Description', width: 160, editor: 'text' },
            { field: 'Width', title: 'Width', width: 60, editor: 'numberbox' },
            {
                field: 'WidthUoMID', title: 'Width UoM', width: 70,
                formatter: function (value, row, index) {
                    return row.WidthUoM;
                },
                editor: {
                    type: 'combobox',
                    options: {
                        valueField: 'Id',
                        textField: 'Code',
                        method: 'get',
                        url: '/ScrimType/GetAllWidthUoMResult',
                        required:true
                    }
                }
            },
            {
                field: 'LengthUoMID', title: 'Length UoM', width: 75,
                formatter: function (value, row, index) {
                    return row.LengthUoM;
                },
                editor: {
                    type: 'combobox',
                    options: {
                        valueField: 'Id',
                        textField: 'Code',
                        method: 'get',
                        url: '/ScrimType/GetAllLengthUoMResult',
                        required: true
                    }
                }
            },
            {
                field: 'WeightUoMID', title: 'Weight UoM', width: 75,
                formatter: function (value, row, index) {
                    return row.WeightUoM;
                },
                editor: {
                    type: 'combobox',
                    options: {
                        valueField: 'Id',
                        textField: 'Code',
                        method: 'get',
                        url: '/ScrimType/GetAllWeightUoMResult',
                        required: true
                    }
                }
            },
            {
                field: 'AreaUoMID', title: 'Area UoM', width: 65,
                formatter: function (value, row, index) {
                    return row.AreaUoM;
                },
                editor: {
                    type: 'combobox',
                    options: {
                        valueField: 'Id',
                        textField: 'Code',
                        method: 'get',
                        url: '/ScrimType/GetAllAreaUoMResult',
                        required: true
                    }
                }
            },
            {
                field: 'Length', title: 'Length In Stock', width: 100,
                formatter: formatNumberAsCommaSeparatedInt
            },
            {
                field: 'Area', title: 'Area In Stock', width: 100,
                formatter: formatNumberAsCommaSeparatedInt
            },
            {

                field: 'Weight', title: 'Weight In Stock', width: 100,
                formatter: formatNumberAsCommaSeparatedInt
            },
        ]]
    });
    var editIndex = undefined;
    function endEditing() {
        if (editIndex == undefined) { return true; }
        if ($('#dg').datagrid('validateRow', editIndex)) {
            $('#dg').datagrid('endEdit', editIndex);
            editIndex = undefined;
            return true;
        } else {
            return false;
        }
    }
    function onClickRow(index) {
        if (editIndex != index) {
            if (endEditing()) {
                $('#dg').datagrid('selectRow', index)
                    .datagrid('beginEdit', index);
                editIndex = index;
            } else {
                $('#dg').datagrid('selectRow', editIndex);
            }
        }
    }
    function append() {
        if (endEditing()) {
            $('#dg').datagrid('appendRow', {
                WidthUoMID: @Model.UoMDefaults.Where(u => u.UomTypeCode == "D").First().UoMID,
                WidthUoM: '@Model.UoMDefaults.Where(u => u.UomTypeCode == "D").First().UoMCode',
                LengthUoMID: @Model.UoMDefaults.Where(u => u.UomTypeCode == "L").First().UoMID,
                LengthUoM: '@Model.UoMDefaults.Where(u => u.UomTypeCode == "L").First().UoMCode',
                AreaUoMID: @Model.UoMDefaults.Where(u => u.UomTypeCode == "A").First().UoMID,
                AreaUoM: '@Model.UoMDefaults.Where(u => u.UomTypeCode == "A").First().UoMCode',
                WeightUoMID: @Model.UoMDefaults.Where(u => u.UomTypeCode == "W").First().UoMID,
                WeightUoM: '@Model.UoMDefaults.Where(u => u.UomTypeCode == "W").First().UoMCode',
                Length: 0,
                Weight: 0,
                @if (isLiner)
                {
                    <text>IsLiner: true</text>
                }
                else
                {
                    <text>IsLiner: false</text>
                }
        });
        editIndex = $('#dg').datagrid('getRows').length - 1;
        $('#dg').datagrid('selectRow', editIndex)
            .datagrid('beginEdit', editIndex);
    }
    }
    function removeit() {
        if (editIndex == undefined) { return }

        var row = $('#dg').datagrid('getSelected');
        if (row) {
            $.ajax({
                url: '/ScrimType/AjaxTypeDelete',
                type: 'POST',
                cache: false,
                data: { row: JSON.stringify(row) },
                success: function (data, textStatus, jqXHR) {
                    if (data.ActionStatus == "ok") {
                        $('#dg').datagrid('reload');
                    }
                    displayMessage(data.ActionType, data.ActionMessage);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    displayMessage('@TPO.Common.Resources.General.ResponseTypeError', 'Error: ' + errorThrown + ' Status: ' + jqXHR.status);
                }
            });
        }
        editIndex = undefined;
    }
    function reloadGrid() {
        $('#dg').datagrid('load');
    }

    function reload() {
        $('#dg').datagrid('reload');
    }
    function accept() {
        if (endEditing()) {
            $('#dg').datagrid('acceptChanges');

            var row = $('#dg').datagrid('getSelected');
            if (row) {
                $.ajax({
                    url: '/ScrimType/AjaxTypeUpdate',
                    type: 'POST',
                    cache: false,
                    data: { row: JSON.stringify(row) },
                    success: function (data, textStatus, jqXHR) {
                        if (data.ActionStatus == "ok") {
                            $('#dg').datagrid('reload');
                        }
                        displayMessage(data.ActionType, data.ActionMessage);
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        displayMessage('@TPO.Common.Resources.General.ResponseTypeError', 'Error: ' + errorThrown + ' Status: ' + jqXHR.status);
                    }
                });
            }
        }
    }
    function reject() {
        $('#dg').datagrid('rejectChanges');
        editIndex = undefined;
    }
    function getChanges() {
        var rows = $('#dg').datagrid('getChanges');
        alert(rows.length + ' rows are changed!');
    }
</script>

