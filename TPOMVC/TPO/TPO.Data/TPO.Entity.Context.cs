//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TPO.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TPOEntities : DbContext
    {
        public TPOEntities()
            : base("name=TPOEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<FailProperty> FailProperties { get; set; }
        public virtual DbSet<IMProductType> IMProductTypes { get; set; }
        public virtual DbSet<IMQC> IMQCs { get; set; }
        public virtual DbSet<Plant> Plants { get; set; }
        public virtual DbSet<ProdLineRollConfig> ProdLineRollConfigs { get; set; }
        public virtual DbSet<ProdLine> ProdLines { get; set; }
        public virtual DbSet<ProdLinesPerform> ProdLinesPerforms { get; set; }
        public virtual DbSet<ProdLinesPerformProd> ProdLinesPerformProds { get; set; }
        public virtual DbSet<ProdLineType> ProdLineTypes { get; set; }
        public virtual DbSet<ProdSupervisorOnShift> ProdSupervisorOnShifts { get; set; }
        public virtual DbSet<ProductionBudget> ProductionBudgets { get; set; }
        public virtual DbSet<ProductionBudgetType> ProductionBudgetTypes { get; set; }
        public virtual DbSet<ProductionLineSchedule> ProductionLineSchedules { get; set; }
        public virtual DbSet<ProductionShift> ProductionShifts { get; set; }
        public virtual DbSet<ProductionShiftType> ProductionShiftTypes { get; set; }
        public virtual DbSet<ProductionShiftUse> ProductionShiftUses { get; set; }
        public virtual DbSet<QCKickout> QCKickouts { get; set; }
        public virtual DbSet<QCPrintSpecification> QCPrintSpecifications { get; set; }
        public virtual DbSet<QCPrintSpecificationType> QCPrintSpecificationTypes { get; set; }
        public virtual DbSet<QCRedHold> QCRedHolds { get; set; }
        public virtual DbSet<RawMaterialActionReason> RawMaterialActionReasons { get; set; }
        public virtual DbSet<RawMaterialActionType> RawMaterialActionTypes { get; set; }
        public virtual DbSet<RawMaterialQCRedHold> RawMaterialQCRedHolds { get; set; }
        public virtual DbSet<RawMaterialReceived> RawMaterialReceiveds { get; set; }
        public virtual DbSet<RawMaterial> RawMaterials { get; set; }
        public virtual DbSet<RawMaterialSpecificGravity> RawMaterialSpecificGravities { get; set; }
        public virtual DbSet<RawMaterialSpecificGravityDetail> RawMaterialSpecificGravityDetails { get; set; }
        public virtual DbSet<RawMaterialTest> RawMaterialTests { get; set; }
        public virtual DbSet<RawMaterialVendor> RawMaterialVendors { get; set; }
        public virtual DbSet<ScrimAction> ScrimActions { get; set; }
        public virtual DbSet<ScrimActionReason> ScrimActionReasons { get; set; }
        public virtual DbSet<ScrimActionType> ScrimActionTypes { get; set; }
        public virtual DbSet<ScrimRoll> ScrimRolls { get; set; }
        public virtual DbSet<ScrimType> ScrimTypes { get; set; }
        public virtual DbSet<TestLimitType> TestLimitTypes { get; set; }
        public virtual DbSet<TPOCProductRoll> TPOCProductRolls { get; set; }
        public virtual DbSet<TPOCurrentRawMaterial> TPOCurrentRawMaterials { get; set; }
        public virtual DbSet<TPOCurrentScrim> TPOCurrentScrims { get; set; }
        public virtual DbSet<TPOExtruder> TPOExtruders { get; set; }
        public virtual DbSet<TPOFormulationLineProduct> TPOFormulationLineProducts { get; set; }
        public virtual DbSet<TPOFormulationRawMaterial> TPOFormulationRawMaterials { get; set; }
        public virtual DbSet<TPOProductCapCoreDetail> TPOProductCapCoreDetails { get; set; }
        public virtual DbSet<TPOProductCEDetail> TPOProductCEDetails { get; set; }
        public virtual DbSet<TPOProductDimDetail> TPOProductDimDetails { get; set; }
        public virtual DbSet<TPOProductGrabDetail> TPOProductGrabDetails { get; set; }
        public virtual DbSet<TPOProductLabelDetail> TPOProductLabelDetails { get; set; }
        public virtual DbSet<TPOProductStandardCost> TPOProductStandardCosts { get; set; }
        public virtual DbSet<UnitOfMeasure> UnitOfMeasures { get; set; }
        public virtual DbSet<UnitOfMeasureType> UnitOfMeasureTypes { get; set; }
        public virtual DbSet<WorkOrder> WorkOrders { get; set; }
        public virtual DbSet<UnitOfMeasureConversion> UnitOfMeasureConversions { get; set; }
        public virtual DbSet<UnitOfMeasureDefault> UnitOfMeasureDefaults { get; set; }
        public virtual DbSet<TPOLineScrapCode> TPOLineScrapCodes { get; set; }
        public virtual DbSet<TPOLineScrapCodeGroup> TPOLineScrapCodeGroups { get; set; }
        public virtual DbSet<UserPlant> UserPlants { get; set; }
        public virtual DbSet<SecurityTask> SecurityTasks { get; set; }
        public virtual DbSet<webpages_Roles> webpages_Roles { get; set; }
        public virtual DbSet<RawMaterialReceivedSizeLimit> RawMaterialReceivedSizeLimits { get; set; }
        public virtual DbSet<TPOFormulation> TPOFormulations { get; set; }
        public virtual DbSet<TPOProduct> TPOProducts { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<TPOReclaimAction> TPOReclaimActions { get; set; }
        public virtual DbSet<TPOReclaimActionType> TPOReclaimActionTypes { get; set; }
        public virtual DbSet<TPOReclaimWIP> TPOReclaimWIPs { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<RoleAssignment> RoleAssignments { get; set; }
        public virtual DbSet<DownTimeEquipment> DownTimeEquipments { get; set; }
        public virtual DbSet<DownTimeEquipmentGroup> DownTimeEquipmentGroups { get; set; }
        public virtual DbSet<DownTimeReason> DownTimeReasons { get; set; }
        public virtual DbSet<DownTimeType> DownTimeTypes { get; set; }
        public virtual DbSet<RawMaterialAction> RawMaterialActions { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<webpages_Membership> webpages_Membership { get; set; }
        public virtual DbSet<webpages_OAuthMembership> webpages_OAuthMembership { get; set; }
        public virtual DbSet<IMProduct> IMProducts { get; set; }
        public virtual DbSet<QCVisualInspectionType> QCVisualInspectionTypes { get; set; }
        public virtual DbSet<RawMaterialQC> RawMaterialQCs { get; set; }
        public virtual DbSet<ProdDateChange> ProdDateChanges { get; set; }
        public virtual DbSet<TPOLineScrap> TPOLineScraps { get; set; }
        public virtual DbSet<TPOLineScrapType> TPOLineScrapTypes { get; set; }
        public virtual DbSet<TPOReworkRoll> TPOReworkRolls { get; set; }
        public virtual DbSet<ProdComment> ProdComments { get; set; }
        public virtual DbSet<DownTime> DownTimes { get; set; }
        public virtual DbSet<WorkOrderShiftData> WorkOrderShiftDatas { get; set; }
        public virtual DbSet<WorkOrderShiftDataFormulation> WorkOrderShiftDataFormulations { get; set; }
        public virtual DbSet<TPOBatch> TPOBatches { get; set; }
        public virtual DbSet<SupervisorOnShift> SupervisorOnShifts { get; set; }
        public virtual DbSet<TPOReworkAction> TPOReworkActions { get; set; }
        public virtual DbSet<TPOReworkActionType> TPOReworkActionTypes { get; set; }
        public virtual DbSet<ApplicationLog> ApplicationLogs { get; set; }
        public virtual DbSet<IMProd> IMProds { get; set; }
    
        public virtual ObjectResult<QCUsersRetrieve_Result> QCUsersRetrieve(Nullable<int> plantID)
        {
            var plantIDParameter = plantID.HasValue ?
                new ObjectParameter("PlantID", plantID) :
                new ObjectParameter("PlantID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<QCUsersRetrieve_Result>("QCUsersRetrieve", plantIDParameter);
        }
    
        public virtual int RawMaterialQCCreate(Nullable<int> plantID, string rawMaterialID, string lotID, Nullable<System.DateTime> dateEntered, string enteredBy, Nullable<System.DateTime> lastModified, string modifiedBy)
        {
            var plantIDParameter = plantID.HasValue ?
                new ObjectParameter("PlantID", plantID) :
                new ObjectParameter("PlantID", typeof(int));
    
            var rawMaterialIDParameter = rawMaterialID != null ?
                new ObjectParameter("RawMaterialID", rawMaterialID) :
                new ObjectParameter("RawMaterialID", typeof(string));
    
            var lotIDParameter = lotID != null ?
                new ObjectParameter("LotID", lotID) :
                new ObjectParameter("LotID", typeof(string));
    
            var dateEnteredParameter = dateEntered.HasValue ?
                new ObjectParameter("DateEntered", dateEntered) :
                new ObjectParameter("DateEntered", typeof(System.DateTime));
    
            var enteredByParameter = enteredBy != null ?
                new ObjectParameter("EnteredBy", enteredBy) :
                new ObjectParameter("EnteredBy", typeof(string));
    
            var lastModifiedParameter = lastModified.HasValue ?
                new ObjectParameter("LastModified", lastModified) :
                new ObjectParameter("LastModified", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RawMaterialQCCreate", plantIDParameter, rawMaterialIDParameter, lotIDParameter, dateEnteredParameter, enteredByParameter, lastModifiedParameter, modifiedByParameter);
        }
    
        public virtual int RawMaterialQCRedHoldCreate(Nullable<int> rawMaterialQCID, Nullable<int> plantID, Nullable<int> rawMaterialReceivedID, Nullable<int> failPropertyID, string holdLotID, Nullable<int> qCTechID, Nullable<int> leadOperatorID, Nullable<int> supervisorID, Nullable<int> managerID, Nullable<System.DateTime> redDate, string zone, string redComments, string redCorrectionAction, Nullable<System.DateTime> holdDate, string holdComments, Nullable<System.DateTime> managerDate, string managerComments, Nullable<double> primeBoxCar, Nullable<double> primeUOM, Nullable<double> reworkBoxCar, Nullable<double> reworkUOM, Nullable<double> scrapBoxCar, Nullable<double> scrapUOM, Nullable<System.DateTime> dateEntered, string enteredBy, Nullable<System.DateTime> lastModified, string modifiedBy)
        {
            var rawMaterialQCIDParameter = rawMaterialQCID.HasValue ?
                new ObjectParameter("RawMaterialQCID", rawMaterialQCID) :
                new ObjectParameter("RawMaterialQCID", typeof(int));
    
            var plantIDParameter = plantID.HasValue ?
                new ObjectParameter("PlantID", plantID) :
                new ObjectParameter("PlantID", typeof(int));
    
            var rawMaterialReceivedIDParameter = rawMaterialReceivedID.HasValue ?
                new ObjectParameter("RawMaterialReceivedID", rawMaterialReceivedID) :
                new ObjectParameter("RawMaterialReceivedID", typeof(int));
    
            var failPropertyIDParameter = failPropertyID.HasValue ?
                new ObjectParameter("FailPropertyID", failPropertyID) :
                new ObjectParameter("FailPropertyID", typeof(int));
    
            var holdLotIDParameter = holdLotID != null ?
                new ObjectParameter("HoldLotID", holdLotID) :
                new ObjectParameter("HoldLotID", typeof(string));
    
            var qCTechIDParameter = qCTechID.HasValue ?
                new ObjectParameter("QCTechID", qCTechID) :
                new ObjectParameter("QCTechID", typeof(int));
    
            var leadOperatorIDParameter = leadOperatorID.HasValue ?
                new ObjectParameter("LeadOperatorID", leadOperatorID) :
                new ObjectParameter("LeadOperatorID", typeof(int));
    
            var supervisorIDParameter = supervisorID.HasValue ?
                new ObjectParameter("SupervisorID", supervisorID) :
                new ObjectParameter("SupervisorID", typeof(int));
    
            var managerIDParameter = managerID.HasValue ?
                new ObjectParameter("ManagerID", managerID) :
                new ObjectParameter("ManagerID", typeof(int));
    
            var redDateParameter = redDate.HasValue ?
                new ObjectParameter("RedDate", redDate) :
                new ObjectParameter("RedDate", typeof(System.DateTime));
    
            var zoneParameter = zone != null ?
                new ObjectParameter("Zone", zone) :
                new ObjectParameter("Zone", typeof(string));
    
            var redCommentsParameter = redComments != null ?
                new ObjectParameter("RedComments", redComments) :
                new ObjectParameter("RedComments", typeof(string));
    
            var redCorrectionActionParameter = redCorrectionAction != null ?
                new ObjectParameter("RedCorrectionAction", redCorrectionAction) :
                new ObjectParameter("RedCorrectionAction", typeof(string));
    
            var holdDateParameter = holdDate.HasValue ?
                new ObjectParameter("HoldDate", holdDate) :
                new ObjectParameter("HoldDate", typeof(System.DateTime));
    
            var holdCommentsParameter = holdComments != null ?
                new ObjectParameter("HoldComments", holdComments) :
                new ObjectParameter("HoldComments", typeof(string));
    
            var managerDateParameter = managerDate.HasValue ?
                new ObjectParameter("ManagerDate", managerDate) :
                new ObjectParameter("ManagerDate", typeof(System.DateTime));
    
            var managerCommentsParameter = managerComments != null ?
                new ObjectParameter("ManagerComments", managerComments) :
                new ObjectParameter("ManagerComments", typeof(string));
    
            var primeBoxCarParameter = primeBoxCar.HasValue ?
                new ObjectParameter("PrimeBoxCar", primeBoxCar) :
                new ObjectParameter("PrimeBoxCar", typeof(double));
    
            var primeUOMParameter = primeUOM.HasValue ?
                new ObjectParameter("PrimeUOM", primeUOM) :
                new ObjectParameter("PrimeUOM", typeof(double));
    
            var reworkBoxCarParameter = reworkBoxCar.HasValue ?
                new ObjectParameter("ReworkBoxCar", reworkBoxCar) :
                new ObjectParameter("ReworkBoxCar", typeof(double));
    
            var reworkUOMParameter = reworkUOM.HasValue ?
                new ObjectParameter("ReworkUOM", reworkUOM) :
                new ObjectParameter("ReworkUOM", typeof(double));
    
            var scrapBoxCarParameter = scrapBoxCar.HasValue ?
                new ObjectParameter("ScrapBoxCar", scrapBoxCar) :
                new ObjectParameter("ScrapBoxCar", typeof(double));
    
            var scrapUOMParameter = scrapUOM.HasValue ?
                new ObjectParameter("ScrapUOM", scrapUOM) :
                new ObjectParameter("ScrapUOM", typeof(double));
    
            var dateEnteredParameter = dateEntered.HasValue ?
                new ObjectParameter("DateEntered", dateEntered) :
                new ObjectParameter("DateEntered", typeof(System.DateTime));
    
            var enteredByParameter = enteredBy != null ?
                new ObjectParameter("EnteredBy", enteredBy) :
                new ObjectParameter("EnteredBy", typeof(string));
    
            var lastModifiedParameter = lastModified.HasValue ?
                new ObjectParameter("LastModified", lastModified) :
                new ObjectParameter("LastModified", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RawMaterialQCRedHoldCreate", rawMaterialQCIDParameter, plantIDParameter, rawMaterialReceivedIDParameter, failPropertyIDParameter, holdLotIDParameter, qCTechIDParameter, leadOperatorIDParameter, supervisorIDParameter, managerIDParameter, redDateParameter, zoneParameter, redCommentsParameter, redCorrectionActionParameter, holdDateParameter, holdCommentsParameter, managerDateParameter, managerCommentsParameter, primeBoxCarParameter, primeUOMParameter, reworkBoxCarParameter, reworkUOMParameter, scrapBoxCarParameter, scrapUOMParameter, dateEnteredParameter, enteredByParameter, lastModifiedParameter, modifiedByParameter);
        }
    
        public virtual int RawMaterialQCRedHoldDelete(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RawMaterialQCRedHoldDelete", iDParameter);
        }
    
        public virtual int RawMaterialQCRedHoldRetrieve(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RawMaterialQCRedHoldRetrieve", iDParameter);
        }
    
        public virtual int RawMaterialQCRedHoldUpdate(Nullable<int> iD, Nullable<int> rawMaterialQCID, Nullable<int> plantID, Nullable<int> rawMaterialReceivedID, Nullable<int> failPropertyID, string holdLotID, Nullable<int> qCTechID, Nullable<int> leadOperatorID, Nullable<int> supervisorID, Nullable<int> managerID, Nullable<System.DateTime> redDate, string zone, string redComments, string redCorrectionAction, Nullable<System.DateTime> holdDate, string holdComments, Nullable<System.DateTime> managerDate, string managerComments, Nullable<double> primeBoxCar, Nullable<double> primeUOM, Nullable<double> reworkBoxCar, Nullable<double> reworkUOM, Nullable<double> scrapBoxCar, Nullable<double> scrapUOM, Nullable<System.DateTime> dateEntered, string enteredBy, Nullable<System.DateTime> lastModified, string modifiedBy)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var rawMaterialQCIDParameter = rawMaterialQCID.HasValue ?
                new ObjectParameter("RawMaterialQCID", rawMaterialQCID) :
                new ObjectParameter("RawMaterialQCID", typeof(int));
    
            var plantIDParameter = plantID.HasValue ?
                new ObjectParameter("PlantID", plantID) :
                new ObjectParameter("PlantID", typeof(int));
    
            var rawMaterialReceivedIDParameter = rawMaterialReceivedID.HasValue ?
                new ObjectParameter("RawMaterialReceivedID", rawMaterialReceivedID) :
                new ObjectParameter("RawMaterialReceivedID", typeof(int));
    
            var failPropertyIDParameter = failPropertyID.HasValue ?
                new ObjectParameter("FailPropertyID", failPropertyID) :
                new ObjectParameter("FailPropertyID", typeof(int));
    
            var holdLotIDParameter = holdLotID != null ?
                new ObjectParameter("HoldLotID", holdLotID) :
                new ObjectParameter("HoldLotID", typeof(string));
    
            var qCTechIDParameter = qCTechID.HasValue ?
                new ObjectParameter("QCTechID", qCTechID) :
                new ObjectParameter("QCTechID", typeof(int));
    
            var leadOperatorIDParameter = leadOperatorID.HasValue ?
                new ObjectParameter("LeadOperatorID", leadOperatorID) :
                new ObjectParameter("LeadOperatorID", typeof(int));
    
            var supervisorIDParameter = supervisorID.HasValue ?
                new ObjectParameter("SupervisorID", supervisorID) :
                new ObjectParameter("SupervisorID", typeof(int));
    
            var managerIDParameter = managerID.HasValue ?
                new ObjectParameter("ManagerID", managerID) :
                new ObjectParameter("ManagerID", typeof(int));
    
            var redDateParameter = redDate.HasValue ?
                new ObjectParameter("RedDate", redDate) :
                new ObjectParameter("RedDate", typeof(System.DateTime));
    
            var zoneParameter = zone != null ?
                new ObjectParameter("Zone", zone) :
                new ObjectParameter("Zone", typeof(string));
    
            var redCommentsParameter = redComments != null ?
                new ObjectParameter("RedComments", redComments) :
                new ObjectParameter("RedComments", typeof(string));
    
            var redCorrectionActionParameter = redCorrectionAction != null ?
                new ObjectParameter("RedCorrectionAction", redCorrectionAction) :
                new ObjectParameter("RedCorrectionAction", typeof(string));
    
            var holdDateParameter = holdDate.HasValue ?
                new ObjectParameter("HoldDate", holdDate) :
                new ObjectParameter("HoldDate", typeof(System.DateTime));
    
            var holdCommentsParameter = holdComments != null ?
                new ObjectParameter("HoldComments", holdComments) :
                new ObjectParameter("HoldComments", typeof(string));
    
            var managerDateParameter = managerDate.HasValue ?
                new ObjectParameter("ManagerDate", managerDate) :
                new ObjectParameter("ManagerDate", typeof(System.DateTime));
    
            var managerCommentsParameter = managerComments != null ?
                new ObjectParameter("ManagerComments", managerComments) :
                new ObjectParameter("ManagerComments", typeof(string));
    
            var primeBoxCarParameter = primeBoxCar.HasValue ?
                new ObjectParameter("PrimeBoxCar", primeBoxCar) :
                new ObjectParameter("PrimeBoxCar", typeof(double));
    
            var primeUOMParameter = primeUOM.HasValue ?
                new ObjectParameter("PrimeUOM", primeUOM) :
                new ObjectParameter("PrimeUOM", typeof(double));
    
            var reworkBoxCarParameter = reworkBoxCar.HasValue ?
                new ObjectParameter("ReworkBoxCar", reworkBoxCar) :
                new ObjectParameter("ReworkBoxCar", typeof(double));
    
            var reworkUOMParameter = reworkUOM.HasValue ?
                new ObjectParameter("ReworkUOM", reworkUOM) :
                new ObjectParameter("ReworkUOM", typeof(double));
    
            var scrapBoxCarParameter = scrapBoxCar.HasValue ?
                new ObjectParameter("ScrapBoxCar", scrapBoxCar) :
                new ObjectParameter("ScrapBoxCar", typeof(double));
    
            var scrapUOMParameter = scrapUOM.HasValue ?
                new ObjectParameter("ScrapUOM", scrapUOM) :
                new ObjectParameter("ScrapUOM", typeof(double));
    
            var dateEnteredParameter = dateEntered.HasValue ?
                new ObjectParameter("DateEntered", dateEntered) :
                new ObjectParameter("DateEntered", typeof(System.DateTime));
    
            var enteredByParameter = enteredBy != null ?
                new ObjectParameter("EnteredBy", enteredBy) :
                new ObjectParameter("EnteredBy", typeof(string));
    
            var lastModifiedParameter = lastModified.HasValue ?
                new ObjectParameter("LastModified", lastModified) :
                new ObjectParameter("LastModified", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RawMaterialQCRedHoldUpdate", iDParameter, rawMaterialQCIDParameter, plantIDParameter, rawMaterialReceivedIDParameter, failPropertyIDParameter, holdLotIDParameter, qCTechIDParameter, leadOperatorIDParameter, supervisorIDParameter, managerIDParameter, redDateParameter, zoneParameter, redCommentsParameter, redCorrectionActionParameter, holdDateParameter, holdCommentsParameter, managerDateParameter, managerCommentsParameter, primeBoxCarParameter, primeUOMParameter, reworkBoxCarParameter, reworkUOMParameter, scrapBoxCarParameter, scrapUOMParameter, dateEnteredParameter, enteredByParameter, lastModifiedParameter, modifiedByParameter);
        }
    
        public virtual int RawMaterialQCUpdate(Nullable<int> iD, Nullable<int> plantID, string boxCarTested, Nullable<int> qCTechUserID, string comments, Nullable<System.DateTime> dateEntered, string enteredBy, Nullable<System.DateTime> lastModified, string modifiedBy)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var plantIDParameter = plantID.HasValue ?
                new ObjectParameter("PlantID", plantID) :
                new ObjectParameter("PlantID", typeof(int));
    
            var boxCarTestedParameter = boxCarTested != null ?
                new ObjectParameter("BoxCarTested", boxCarTested) :
                new ObjectParameter("BoxCarTested", typeof(string));
    
            var qCTechUserIDParameter = qCTechUserID.HasValue ?
                new ObjectParameter("QCTechUserID", qCTechUserID) :
                new ObjectParameter("QCTechUserID", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var dateEnteredParameter = dateEntered.HasValue ?
                new ObjectParameter("DateEntered", dateEntered) :
                new ObjectParameter("DateEntered", typeof(System.DateTime));
    
            var enteredByParameter = enteredBy != null ?
                new ObjectParameter("EnteredBy", enteredBy) :
                new ObjectParameter("EnteredBy", typeof(string));
    
            var lastModifiedParameter = lastModified.HasValue ?
                new ObjectParameter("LastModified", lastModified) :
                new ObjectParameter("LastModified", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RawMaterialQCUpdate", iDParameter, plantIDParameter, boxCarTestedParameter, qCTechUserIDParameter, commentsParameter, dateEnteredParameter, enteredByParameter, lastModifiedParameter, modifiedByParameter);
        }
    
        public virtual int RawMaterialReceivedCreate(Nullable<int> plantID, string rawMaterialID, Nullable<int> lotID, Nullable<System.DateTime> dateEntered, string enteredBy, Nullable<System.DateTime> lastModified, string modifiedBy)
        {
            var plantIDParameter = plantID.HasValue ?
                new ObjectParameter("PlantID", plantID) :
                new ObjectParameter("PlantID", typeof(int));
    
            var rawMaterialIDParameter = rawMaterialID != null ?
                new ObjectParameter("RawMaterialID", rawMaterialID) :
                new ObjectParameter("RawMaterialID", typeof(string));
    
            var lotIDParameter = lotID.HasValue ?
                new ObjectParameter("LotID", lotID) :
                new ObjectParameter("LotID", typeof(int));
    
            var dateEnteredParameter = dateEntered.HasValue ?
                new ObjectParameter("DateEntered", dateEntered) :
                new ObjectParameter("DateEntered", typeof(System.DateTime));
    
            var enteredByParameter = enteredBy != null ?
                new ObjectParameter("EnteredBy", enteredBy) :
                new ObjectParameter("EnteredBy", typeof(string));
    
            var lastModifiedParameter = lastModified.HasValue ?
                new ObjectParameter("LastModified", lastModified) :
                new ObjectParameter("LastModified", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RawMaterialReceivedCreate", plantIDParameter, rawMaterialIDParameter, lotIDParameter, dateEnteredParameter, enteredByParameter, lastModifiedParameter, modifiedByParameter);
        }
    
        public virtual int RawMaterialReceivedDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RawMaterialReceivedDelete", idParameter);
        }
    
        public virtual int RawMaterialReceivedRetrieve()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RawMaterialReceivedRetrieve");
        }
    
        public virtual int RawMaterialReceivedUpdate(Nullable<int> id, Nullable<int> lotID, Nullable<System.DateTime> dateEntered, string enteredBy)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var lotIDParameter = lotID.HasValue ?
                new ObjectParameter("LotID", lotID) :
                new ObjectParameter("LotID", typeof(int));
    
            var dateEnteredParameter = dateEntered.HasValue ?
                new ObjectParameter("DateEntered", dateEntered) :
                new ObjectParameter("DateEntered", typeof(System.DateTime));
    
            var enteredByParameter = enteredBy != null ?
                new ObjectParameter("EnteredBy", enteredBy) :
                new ObjectParameter("EnteredBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RawMaterialReceivedUpdate", idParameter, lotIDParameter, dateEnteredParameter, enteredByParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_get_QCUsers_Result> sp_get_QCUsers(Nullable<int> plantID)
        {
            var plantIDParameter = plantID.HasValue ?
                new ObjectParameter("PlantID", plantID) :
                new ObjectParameter("PlantID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_get_QCUsers_Result>("sp_get_QCUsers", plantIDParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int spInsertRawMaterialQC(Nullable<int> plantID, string rawMaterialID, string lotID, Nullable<System.DateTime> dateEntered, string enteredBy, Nullable<System.DateTime> lastModified, string modifiedBy)
        {
            var plantIDParameter = plantID.HasValue ?
                new ObjectParameter("PlantID", plantID) :
                new ObjectParameter("PlantID", typeof(int));
    
            var rawMaterialIDParameter = rawMaterialID != null ?
                new ObjectParameter("RawMaterialID", rawMaterialID) :
                new ObjectParameter("RawMaterialID", typeof(string));
    
            var lotIDParameter = lotID != null ?
                new ObjectParameter("LotID", lotID) :
                new ObjectParameter("LotID", typeof(string));
    
            var dateEnteredParameter = dateEntered.HasValue ?
                new ObjectParameter("DateEntered", dateEntered) :
                new ObjectParameter("DateEntered", typeof(System.DateTime));
    
            var enteredByParameter = enteredBy != null ?
                new ObjectParameter("EnteredBy", enteredBy) :
                new ObjectParameter("EnteredBy", typeof(string));
    
            var lastModifiedParameter = lastModified.HasValue ?
                new ObjectParameter("LastModified", lastModified) :
                new ObjectParameter("LastModified", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertRawMaterialQC", plantIDParameter, rawMaterialIDParameter, lotIDParameter, dateEnteredParameter, enteredByParameter, lastModifiedParameter, modifiedByParameter);
        }
    
        public virtual int spRawMaterialReceivce(Nullable<int> plantID, string rawMaterialID, Nullable<int> lotID, Nullable<System.DateTime> dateEntered, string enteredBy, Nullable<System.DateTime> lastModified, string modifiedBy)
        {
            var plantIDParameter = plantID.HasValue ?
                new ObjectParameter("PlantID", plantID) :
                new ObjectParameter("PlantID", typeof(int));
    
            var rawMaterialIDParameter = rawMaterialID != null ?
                new ObjectParameter("RawMaterialID", rawMaterialID) :
                new ObjectParameter("RawMaterialID", typeof(string));
    
            var lotIDParameter = lotID.HasValue ?
                new ObjectParameter("LotID", lotID) :
                new ObjectParameter("LotID", typeof(int));
    
            var dateEnteredParameter = dateEntered.HasValue ?
                new ObjectParameter("DateEntered", dateEntered) :
                new ObjectParameter("DateEntered", typeof(System.DateTime));
    
            var enteredByParameter = enteredBy != null ?
                new ObjectParameter("EnteredBy", enteredBy) :
                new ObjectParameter("EnteredBy", typeof(string));
    
            var lastModifiedParameter = lastModified.HasValue ?
                new ObjectParameter("LastModified", lastModified) :
                new ObjectParameter("LastModified", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spRawMaterialReceivce", plantIDParameter, rawMaterialIDParameter, lotIDParameter, dateEnteredParameter, enteredByParameter, lastModifiedParameter, modifiedByParameter);
        }
    
        public virtual int spRawMaterialReceivedDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spRawMaterialReceivedDelete", idParameter);
        }
    
        public virtual int spRawMaterialReceivedOverview()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spRawMaterialReceivedOverview");
        }
    
        public virtual int spSaveRawMaterialReceivce(Nullable<int> id, Nullable<int> lotID, Nullable<System.DateTime> dateEntered, string enteredBy)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var lotIDParameter = lotID.HasValue ?
                new ObjectParameter("LotID", lotID) :
                new ObjectParameter("LotID", typeof(int));
    
            var dateEnteredParameter = dateEntered.HasValue ?
                new ObjectParameter("DateEntered", dateEntered) :
                new ObjectParameter("DateEntered", typeof(System.DateTime));
    
            var enteredByParameter = enteredBy != null ?
                new ObjectParameter("EnteredBy", enteredBy) :
                new ObjectParameter("EnteredBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSaveRawMaterialReceivce", idParameter, lotIDParameter, dateEnteredParameter, enteredByParameter);
        }
    
        public virtual int spUpdateRawMaterialQC(Nullable<int> iD, Nullable<int> plantID, string boxCarTested, Nullable<int> qCTechUserID, string comments, Nullable<System.DateTime> dateEntered, string enteredBy, Nullable<System.DateTime> lastModified, string modifiedBy)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var plantIDParameter = plantID.HasValue ?
                new ObjectParameter("PlantID", plantID) :
                new ObjectParameter("PlantID", typeof(int));
    
            var boxCarTestedParameter = boxCarTested != null ?
                new ObjectParameter("BoxCarTested", boxCarTested) :
                new ObjectParameter("BoxCarTested", typeof(string));
    
            var qCTechUserIDParameter = qCTechUserID.HasValue ?
                new ObjectParameter("QCTechUserID", qCTechUserID) :
                new ObjectParameter("QCTechUserID", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var dateEnteredParameter = dateEntered.HasValue ?
                new ObjectParameter("DateEntered", dateEntered) :
                new ObjectParameter("DateEntered", typeof(System.DateTime));
    
            var enteredByParameter = enteredBy != null ?
                new ObjectParameter("EnteredBy", enteredBy) :
                new ObjectParameter("EnteredBy", typeof(string));
    
            var lastModifiedParameter = lastModified.HasValue ?
                new ObjectParameter("LastModified", lastModified) :
                new ObjectParameter("LastModified", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateRawMaterialQC", iDParameter, plantIDParameter, boxCarTestedParameter, qCTechUserIDParameter, commentsParameter, dateEnteredParameter, enteredByParameter, lastModifiedParameter, modifiedByParameter);
        }
    }
}
